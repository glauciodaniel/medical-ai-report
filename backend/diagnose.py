#!/usr/bin/env python3
"""
Script de diagn√≥stico para identificar problemas de configura√ß√£o
"""

import os
from pathlib import Path

def check_env_file():
    """Verifica se o arquivo .env existe e est√° configurado"""
    print("üîç Verificando arquivo .env...")
    
    env_path = Path(".env")
    if not env_path.exists():
        print("‚ùå Arquivo .env n√£o encontrado!")
        print("   Crie um arquivo .env na pasta backend/ com:")
        print("   HUGGINGFACE_API_TOKEN=seu-token-aqui")
        return False
    
    print("‚úÖ Arquivo .env encontrado")
    
    # Ler e verificar conte√∫do
    with open(env_path, 'r') as f:
        content = f.read()
    
    lines = content.strip().split('\n')
    token_line = None
    
    for line in lines:
        if line.startswith('HUGGINGFACE_API_TOKEN='):
            token_line = line
            break
    
    if not token_line:
        print("‚ùå HUGGINGFACE_API_TOKEN n√£o encontrado no arquivo .env")
        return False
    
    token = token_line.split('=', 1)[1].strip()
    
    if not token or token == 'seu-token-aqui':
        print("‚ùå HUGGINGFACE_API_TOKEN n√£o configurado corretamente")
        print(f"   Valor atual: '{token}'")
        return False
    
    if not token.startswith('hf_'):
        print("‚ùå Token n√£o come√ßa com 'hf_'")
        print(f"   Token: {token[:20]}...")
        return False
    
    print(f"‚úÖ Token configurado: {token[:20]}...")
    return True

def check_environment_variables():
    """Verifica vari√°veis de ambiente"""
    print("\nüîç Verificando vari√°veis de ambiente...")
    
    # Verificar se python-dotenv est√° instalado
    try:
        from dotenv import load_dotenv
        print("‚úÖ python-dotenv instalado")
    except ImportError:
        print("‚ùå python-dotenv n√£o instalado")
        print("   Execute: pip install python-dotenv")
        return False
    
    # Carregar vari√°veis
    load_dotenv()
    
    token = os.getenv("HUGGINGFACE_API_TOKEN")
    model_url = os.getenv("MEDGEMMA_MODEL_URL")
    
    print(f"   HUGGINGFACE_API_TOKEN: {'‚úÖ Configurado' if token else '‚ùå N√£o configurado'}")
    print(f"   MEDGEMMA_MODEL_URL: {'‚úÖ Configurado' if model_url else '‚ùå N√£o configurado'}")
    
    if token:
        print(f"   Token: {token[:20]}...")
        if not token.startswith('hf_'):
            print("   ‚ö†Ô∏è  Token n√£o come√ßa com 'hf_'")
    
    return bool(token)

def check_dependencies():
    """Verifica depend√™ncias Python"""
    print("\nüîç Verificando depend√™ncias...")
    
    dependencies = {
        'requests': 'HTTP requests',
        'PIL': 'Processamento de imagem',
        'fastapi': 'Framework web',
        'uvicorn': 'Servidor ASGI'
    }
    
    all_ok = True
    
    for module, description in dependencies.items():
        try:
            if module == 'PIL':
                import PIL
                print(f"‚úÖ {description}: OK")
            else:
                __import__(module)
                print(f"‚úÖ {description}: OK")
        except ImportError:
            print(f"‚ùå {description}: N√£o instalado")
            all_ok = False
    
    return all_ok

def check_config_import():
    """Verifica se o arquivo config.py pode ser importado"""
    print("\nüîç Verificando importa√ß√£o da configura√ß√£o...")
    
    try:
        from config import (
            HUGGINGFACE_API_TOKEN,
            MEDGEMMA_MODEL_URL,
            validate_config
        )
        print("‚úÖ Configura√ß√£o importada com sucesso")
        
        print(f"   Token: {HUGGINGFACE_API_TOKEN[:20] if HUGGINGFACE_API_TOKEN else 'N√ÉO CONFIGURADO'}...")
        print(f"   Modelo: {MEDGEMMA_MODEL_URL}")
        
        # Testar valida√ß√£o
        is_valid = validate_config()
        print(f"   Valida√ß√£o: {'‚úÖ PASSOU' if is_valid else '‚ùå FALHOU'}")
        
        return is_valid
        
    except ImportError as e:
        print(f"‚ùå Erro ao importar configura√ß√£o: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def main():
    """Executa todos os diagn√≥sticos"""
    print("üè• DIAGN√ìSTICO DO BACKEND - Medical AI Report")
    print("=" * 60)
    
    results = []
    
    # Verificar arquivo .env
    results.append(check_env_file())
    
    # Verificar vari√°veis de ambiente
    results.append(check_environment_variables())
    
    # Verificar depend√™ncias
    results.append(check_dependencies())
    
    # Verificar importa√ß√£o da configura√ß√£o
    results.append(check_config_import())
    
    print("\n" + "=" * 60)
    print("üìä RESUMO DO DIAGN√ìSTICO:")
    
    if all(results):
        print("üéâ TUDO FUNCIONANDO! O backend deve conseguir usar o modelo MedGemma")
        print("\nüöÄ Para testar:")
        print("   1. python test_huggingface.py")
        print("   2. python main.py")
    else:
        print("‚ö†Ô∏è  PROBLEMAS IDENTIFICADOS:")
        if not results[0]:
            print("   - Configure o arquivo .env com HUGGINGFACE_API_TOKEN")
        if not results[1]:
            print("   - Verifique se as vari√°veis de ambiente est√£o carregadas")
        if not results[2]:
            print("   - Instale as depend√™ncias: pip install -r requirements.txt")
        if not results[3]:
            print("   - Verifique se o arquivo config.py est√° correto")
        
        print("\nüîß SOLU√á√ÉO:")
        print("   1. Crie um arquivo .env na pasta backend/")
        print("   2. Adicione: HUGGINGFACE_API_TOKEN=hf_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
        print("   3. Execute: pip install -r requirements.txt")
        print("   4. Teste: python diagnose.py")

if __name__ == "__main__":
    main()
